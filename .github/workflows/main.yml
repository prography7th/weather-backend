name: CI/CD

on:
  push:
    branches: [main]

env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/weather
  VERSION: ${{ github.sha }}
  NAME: weather

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Check out source code
        uses: actions/checkout@v2
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest
  deploy:
    needs: build
    name: Deploy
    runs-on: [self-hosted, label-cicd]
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Docker run
        run: |
          docker stop ${{ env.NAME }} && docker rm ${{ env.NAME }} && docker rmi ${{ env.DOCKER_IMAGE }}:latest
          docker run -d -p 80:${{ secrets.PORT }} -e DB_HOST=${{ secrets.DB_HOST }} -e DB_PORT=${{ secrets.DB_PORT }} -e DB_USERNAME=${{ secrets.DB_USERNAME }} -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} -e DB_DATABASE=${{ secrets.DB_DATABASE }} -e DUST_SERVICE_KEY=${{ secrets.DUST_SERVICE_KEY }} -e DUST_END_POINT=${{ secrets.DUST_END_POINT }} -e COORDINATE_API_KEY=${{ secrets.COORDINATE_API_KEY }} -e COORDINATE_END_POINT=${{ secrets.COORDINATE_END_POINT }} -e SHORT_SERVICE_KEY=${{ secrets.SHORT_SERVICE_KEY }} -e SHORT_END_POINT=${{ secrets.SHORT_END_POINT }} -e VERY_SHORT_END_POINT=${{ secrets.VERY_SHORT_END_POINT }} -e M_FORECAST_SERVICE_KEY=${{ secrets.M_FORECAST_SERVICE_KEY }} -e M_TMP_END_POINT=${{ secrets.M_TMP_END_POINT }} -e M_RAND_END_POINT=${{ secrets.M_RAND_END_POINT }} --restart always ${{ env.DOCKER_IMAGE }}:latest
